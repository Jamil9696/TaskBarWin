<root><type name="start_menu.StartMenuController" s="23"  vis="public"  kind="class"  dep ="false" fin ="false" sta ="false" abs ="false" n ="false" c="0" >
<type name="start_menu.StartMenuController$VIEW_POSITION" s="25"  vis="private"  kind="enum"  dep ="false" fin ="false" sta ="false" abs ="false" n ="true" c="0">
<field name="BOTTOM" s="25" type="int" vis="package"  c="0" >
</field>
<field name="TOP" s="25" type="int" vis="package"  c="0" >
</field>
<field name="LEFT" s="25" type="int" vis="package"  c="0" >
</field>
<field name="RIGHT" s="25" type="int" vis="package"  c="0" >
</field>
<field name="CENTER" s="25" type="int" vis="package"  c="0" >
</field>

</type><field name="mainView" s="27" type="start_menu.StartMenuView" vis="private"  fin ="true" sta ="false" c="0" >
</field>
<field name="model" s="28" type="start_menu.StartMenuModel" vis="private"  fin ="true" sta ="false" c="0" >
</field>
<field name="controller_list" s="29" type="interfaces.Controllers[]" vis="private"  fin ="true" sta ="false" c="0" >
</field>
<dm p="taskbar_bottom.ControllerBottom" s="ControllerBottom(taskbar_bottom.ViewBottom)"/>
<dm p="taskbar_bottom.ViewBottom" s="ViewBottom()"/>
<dm p="taskbar_center.ControllerCenter" s="ControllerCenter(taskbar_center.ViewCenter)"/>
<dm p="taskbar_center.ViewCenter" s="ViewCenter()"/>
<dm p="taskbar_right.ControllerRight" s="ControllerRight(taskbar_right.ViewRight)"/>
<dm p="taskbar_right.ViewRight" s="ViewRight()"/>
<method name="StartMenuController()" s="33" e="37" cons ="true" n ="false" sta ="false" sync ="false" vis="public" return="void"  signature="()"><dm p="start_menu.StartMenuView" s="StartMenuView()"/>
<dm p="start_menu.StartMenuModel" s="StartMenuModel()"/>
<metrics cc="1" cm="0" vars="0" loc="2"/></method><method name="initialize_controller_list()" s="38" e="43" n ="false" sta ="false" sync ="false" vis="public" return="void"  signature="()"><dm p="interfaces.Controllers" s="start()"/>
<metrics cc="2" cm="0" vars="0" loc="2"/></method><method name="read_data()" s="44" e="46" n ="false" sta ="false" sync ="false" vis="public" return="void"  signature="()"><dm p="start_menu.StartMenuModel" s="readData()"/>
<metrics cc="1" cm="0" vars="0" loc="1"/></method><method name="updateData()" s="48" e="53" n ="false" sta ="false" sync ="false" vis="public" return="void"  signature="()"><dm p="start_menu.StartMenuModel" s="getIconList()"/>
<dm p="start_menu.StartMenuController" s="updateViews(interfaces.Icons)"/>
<metrics cc="2" cm="0" vars="0" loc="2"/></method><method name="start()" s="55" e="63" n ="false" sta ="false" sync ="false" vis="public" return="void"  signature="()"><dm p="start_menu.StartMenuView" s="start()"/>
<dm p="start_menu.StartMenuView" s="setPosition(int,javafx.scene.Node)"/>
<dm p="java.lang.Enum" s="ordinal()"/>
<dm p="interfaces.Controllers" s="getScrollPane()"/>
<dm p="start_menu.StartMenuView" s="setPosition(int,javafx.scene.Node)"/>
<dm p="java.lang.Enum" s="ordinal()"/>
<dm p="interfaces.Controllers" s="getScrollPane()"/>
<dm p="start_menu.StartMenuView" s="setPosition(int,javafx.scene.Node)"/>
<dm p="java.lang.Enum" s="ordinal()"/>
<dm p="interfaces.Controllers" s="getLayoutContainer()"/>
<metrics cc="1" cm="0" vars="0" loc="4"/></method><method name="updateViews(interfaces.Icons)" s="64" e="70" n ="false" sta ="false" sync ="false" vis="private" return="void"  signature="(interfaces.Icons)"><params><param type="interfaces.Icons"/></params><dm p="interfaces.Controllers" s="add_new_icon(java.lang.String,java.lang.String)"/>
<dm p="interfaces.Icons" s="getImageName()"/>
<dm p="interfaces.Icons" s="getTarget()"/>
<dm p="interfaces.Controllers" s="add_new_icon(interfaces.Icons)"/>
<dm p="interfaces.Controllers" s="add_new_icon(java.lang.String,java.lang.String)"/>
<dm p="interfaces.Icons" s="getTarget()"/>
<dm p="interfaces.Icons" s="getTarget()"/>
<dm p="start_menu.StartMenuController" s="connect_delete_Buttons(javafx.scene.control.Button)"/>
<dm p="interfaces.Icons" s="getButton()"/>
<metrics cc="1" cm="0" vars="0" loc="4"/></method><method name="connectViews()" s="71" e="94" n ="false" sta ="false" sync ="false" vis="public" return="void"  signature="()"><dm p="java.util.List" s="get(int)"/>
<dm p="javafx.scene.layout.Pane" s="getChildren()"/>
<dm p="interfaces.Controllers" s="getLayoutContainer()"/>
<dm p="javafx.scene.Node" s="setOnMouseClicked(javafx.event.EventHandler)"/>
<dm p="start_menu.StartMenuController" s="start_menu()"/>
<dm p="javafx.scene.Node" s="setOnKeyPressed(javafx.event.EventHandler)"/>
<dm p="interfaces.Controllers" s="getLayoutContainer()"/>
<dm p="javafx.scene.Node" s="setOnDragDropped(javafx.event.EventHandler)"/>
<dm p="interfaces.Controllers" s="getLayoutContainer()"/>
<dm p="start_menu.StartMenuController" s="dragDropped(javafx.scene.input.DragEvent)"/>
<dm p="java.lang.Throwable" s="printStackTrace()"/>
<dm p="javafx.scene.Node" s="setOnDragOver(javafx.event.EventHandler)"/>
<dm p="interfaces.Controllers" s="getLayoutContainer()"/>
<dm p="javafx.scene.input.DragEvent" s="getGestureSource()"/>
<dm p="javafx.scene.input.Clipboard" s="hasFiles()"/>
<dm p="javafx.scene.input.DragEvent" s="getDragboard()"/>
<dm p="javafx.scene.input.DragEvent" s="acceptTransferModes(javafx.scene.input.TransferMode[])"/>
<dm p="javafx.event.Event" s="consume()"/>
<metrics cc="5" cm="0" vars="4" loc="11"/></method><method name="connect_delete_Buttons(javafx.scene.control.Button)" s="95" e="100" n ="false" sta ="false" sync ="false" vis="private" return="void"  signature="(javafx.scene.control.Button)"><params><param type="javafx.scene.control.Button"/></params><dm p="javafx.scene.Node" s="getParent()"/>
<dm p="java.util.List" s="get(int)"/>
<dm p="javafx.scene.layout.Pane" s="getChildren()"/>
<dm p="javafx.scene.Node" s="setOnMouseClicked(javafx.event.EventHandler)"/>
<dm p="start_menu.StartMenuController" s="delete_icon(javafx.scene.shape.Circle)"/>
<metrics cc="1" cm="0" vars="3" loc="3"/></method><method name="delete_icon(javafx.scene.shape.Circle)" s="101" e="111" n ="false" sta ="false" sync ="false" vis="private" return="void"  signature="(javafx.scene.shape.Circle)"><params><param type="javafx.scene.shape.Circle"/></params><dm p="javafx.scene.Node" s="getParent()"/>
<dm p="java.util.List" s="get(int)"/>
<dm p="javafx.scene.layout.Pane" s="getChildren()"/>
<dm p="start_menu.StartMenuModel" s="remove(javafx.scene.control.Button)"/>
<dm p="interfaces.Controllers" s="remove(javafx.scene.control.Button)"/>
<dm p="start_menu.StartMenuModel" s="save_menu()"/>
<metrics cc="2" cm="0" vars="2" loc="6"/></method><method name="dragDropped(javafx.scene.input.DragEvent)" s="113" e="134" n ="false" sta ="false" sync ="false" vis="public" return="void"  signature="(javafx.scene.input.DragEvent)"><params><param type="javafx.scene.input.DragEvent"/></params><dm p="javafx.scene.input.Clipboard" s="getFiles()"/>
<dm p="javafx.scene.input.DragEvent" s="getDragboard()"/>
<dm p="java.util.stream.Stream" s="collect(java.util.stream.Collector)"/>
<dm p="java.util.stream.Stream" s="filter(java.util.function.Predicate)"/>
<dm p="java.util.Collection" s="stream()"/>
<dm p="start_menu.StartMenuModel" s="fileExists(java.io.File)"/>
<dm p="java.util.stream.Collectors" s="toList()"/>
<dm p="java.util.List" s="isEmpty()"/>
<dm p="java.lang.Thread" s="Thread(java.lang.Runnable)"/>
<dm p="java.lang.Iterable" s="forEach(java.util.function.Consumer)"/>
<dm p="java.lang.Thread" s="start()"/>
<dm p="java.util.stream.Stream" s="forEach(java.util.function.Consumer)"/>
<dm p="java.util.stream.Stream" s="peek(java.util.function.Consumer)"/>
<dm p="java.util.Collection" s="stream()"/>
<dm p="start_menu.StartMenuModel" s="add_new_icon(java.lang.String,java.lang.String)"/>
<dm p="java.io.File" s="getName()"/>
<dm p="java.io.File" s="getName()"/>
<dm p="start_menu.StartMenuController" s="updateViews(interfaces.Icons)"/>
<dm p="java.util.List" s="get(int)"/>
<dm p="start_menu.StartMenuModel" s="getIconList()"/>
<dm p="java.util.List" s="size()"/>
<dm p="start_menu.StartMenuModel" s="getIconList()"/>
<dm p="start_menu.StartMenuModel" s="save_menu()"/>
<metrics cc="2" cm="0" vars="6" loc="8"/></method><method name="start_menu()" s="136" e="138" n ="false" sta ="false" sync ="false" vis="private" return="void"  signature="()"><dm p="start_menu.StartMenuView" s="show_view_center()"/>
<metrics cc="1" cm="0" vars="0" loc="1"/></method><method name="close_start_menu(javafx.scene.input.KeyEvent)" s="139" e="149" n ="false" sta ="false" sync ="false" vis="private" return="void"  signature="(javafx.scene.input.KeyEvent)"><params><param type="javafx.scene.input.KeyEvent"/></params><dm p="java.lang.Enum" s="equals(java.lang.Object)"/>
<dm p="javafx.scene.input.KeyEvent" s="getCode()"/>
<dm p="start_menu.StartMenuView" s="setPosition(int,javafx.scene.Node)"/>
<dm p="java.lang.Enum" s="ordinal()"/>
<dm p="interfaces.Controllers" s="getScrollPane()"/>
<dm p="start_menu.StartMenuView" s="setPosition(int,javafx.scene.Node)"/>
<dm p="java.lang.Enum" s="ordinal()"/>
<dm p="interfaces.Controllers" s="getScrollPane()"/>
<dm p="start_menu.StartMenuView" s="setPosition(int,javafx.scene.Node)"/>
<dm p="java.lang.Enum" s="ordinal()"/>
<dm p="interfaces.Controllers" s="getLayoutContainer()"/>
<dm p="start_menu.StartMenuView" s="show_view_bottom_right()"/>
<metrics cc="2" cm="0" vars="0" loc="5"/></method>
</type></root>